@startuml
Agent <|-- MovableAgent
MovableAgent <|-- ChickenController
MovableAgent <|-- FoxController
NotMovableAgent <|-- GrassController
Agent <|-- NotMovableAgent
IAgentController <|.. Agent
Agent -> AgentStats
MonoBehaviour <|-- Agent
MonoBehaviour <|-- AgentSpawner

interface IAgentController {
+void moveTo(Vector3 to)
+void moveTo(GameObject to)
+void ResetCoroutines()
+void BeginSolvingState()
+bool IsSolving()
+bool IsThere()
+bool IsHere(Vector3 to)
+float SizeWithAge()
+Species GetSpecies()
+double GetAge()
+GameObject getBestWaterPosition()
+Agent getBestFoodPosition()
+Agent findMate
}

abstract class Agent {
+WorldController worldController
+AgentStats stats
-State currentState
-State nextState
-bool finished
-float age
+void Start()
+void Update()
+void ResetCoroutines()
+void FinishSolvingState()
+void BeginSolvingState()
+void IsSolving()
+bool IsThere()
+bool IsHere(Vector3 to)
+void Die()
+IEnumerator GetNextState()
+IEnumerator SolveState()
+float GetSizeWithAge()
+void GetAge()
}

class AgentStats {
-SortedDictionary<Attribute, double> atts
-SortedDictionary<Need, double> needs
-SortedDictionary<Distance, double> distances
-SortedSet<State> states
-Matrix<double> weights
-int qAtts
-int qNeeds
-int qStates
-int qDists
-Vector<double> neuralInput
-Vector<double> neuralOutput
-{static}MatrixBuilder<double> m
-{static}VectorBuilder<double> v
'+AgentStats(SortedDictionary<Attribute, double> atts, SortedDictionary<Need, double> needs, SortedSet<State> states, Matrix<double> weights) {
+AgentStats(...)
+State NextState()
}

abstract class MovableAgent {
+NavMeshAgent agent
+void moveTo(Vector3 to)
+void moveTo(GameObject to)
+IEnumerator FollowObject(GameObject to)
+IEnumerator WaitTilThereCoroutine(Vector3 to)
}

abstract class NotMovableAgent {
+{abstract} void moveTo(Vector3 to)
+{abstract} void moveTo(GameObject to)
}

class ChickenController {
~void Update()
~void Start()
-float getEffectiveSpeed(double normalized)
-float getEffectiveSize(double normalized)
+Agent findMate()
+Agent getBestFoodPosition()
+GameObject getBestWaterPosition()
+Species GetSpecies()
+string ToString()
}

class GrassController {
~void Update()
~void Start()
+Agent findMate()
+Agent getBestFoodPosition()
+GameObject getBestWaterPosition()
+Species GetSpecies()
+string ToString()
}

class FoxController {
~void Update()
~void Start()
-float getEffectiveSpeed(double normalized)
-float getEffectiveSize(double normalized)
+Agent findMate()
+Agent getBestFoodPosition()
+GameObject getBestWaterPosition()
+Species GetSpecies()
+string ToString()
}


class AgentSpawner {
-static Dictionary<Species, GameObject> speciesPrefabsStatic
-Dictionary<Species, List<Vector3>> NonMovableAgentsPositions
-Dictionary<Species, HashSet<Agent>> InGameAgents
+SerializableDictionary<Species, GameObject> speciesPrefabs
+Dictionary<Species, HashSet<Agent>> gameAgents
+GameObject popup;
-Dictionary<Species, List<int>> valueLists

~void Start()
+void AddSpecies(Species species, GameObject gameObject)
+HashSet<Agent> GetSpecies(Species species)
+void Died(Agent agent, Species species)
+void Reproduce(Agent ag1, Agent ag2, Species species)
+void AsexualReproduce(Agent ag1, Species species)
+void GetObjectData(SerializationInfo info, StreamingContext context)
+void WriteData()
+IEnumerator AddDataPoint()
+List<int> FetchDataPoints(Species species)
+List<int> FetchAverageChickenSpeedList()
+List<int> FetchChickenSizeDataPoints()
}

class SpeciesFactory {
-{static} Dictionary<Species, SortedDictionary<Attribute, double>> spec_atts
-{static} Dictionary<Species, SortedSet<Distance>> spec_distances
-{static} Dictionary<Species, SortedSet<Need>> spec_needs
-{static} Dictionary<Species, SortedSet<State>> spec_states
-{static} Dictionary<Species, float> spec_mutability
-{static} Dictionary<Species, Matrix<double>> default_weights
+{static} AgentStats NewAgentStats(Species species)
+{static} AgentStats NewAgentStats(AgentStats p1, AgentStats p2, Species species)
}


enum Attribute {
Speed
Size
Color
}

enum Need {
Sleep
Hunger
ReproductiveUrge
Thirst
}

enum Distance {
ToWater
ToFood
}

enum Species {
Chicken
Fox
Grass
}

enum Inorganic {
Water
}

enum State {
LookForFood
LookForWater
Stealth
Sleep
Wander
Reproduce
AsexualReproduce
Idle
}

class StateExtensions {
+{static} void SolveState(State state, IAgentController controller)
}

note right of StateExtensions
Es static
end note

note right of SpeciesFactory
Es static
end note

'note right of StateExtensions
'Es static
'end note
@enduml