@startuml
Agent <|-- MovableAgent
Agent <|-- NotMovableAgent
MovableAgent <|-- ChickenController
MovableAgent <|-- FoxController
NotMovableAgent <|-- GrassController
IAgentController <|.. Agent
Agent -> AgentStats

MonoBehaviour <|-- Agent

interface IAgentController {
+void moveTo(Vector3 to)
+void moveTo(GameObject to)
+void ResetCoroutines()
+void BeginSolvingState()
+bool IsSolving()
+bool IsThere()
+bool IsHere(Vector3 to)
+float SizeWithAge()
+Species GetSpecies()
+double GetAge()
+GameObject getBestWaterPosition()
+Agent getBestFoodPosition()
+Agent findMate
}

abstract class Agent {
+WorldController worldController
+AgentStats stats
-State currentState
-State nextState
-bool finished
-float age
+void Start()
+void Update()
+void ResetCoroutines()
+void FinishSolvingState()
+void BeginSolvingState()
+void IsSolving()
+bool IsThere()
+bool IsHere(Vector3 to)
+void Die()
+IEnumerator GetNextState()
+IEnumerator SolveState()
+float GetSizeWithAge()
+void GetAge()
}

class AgentStats {
-SortedDictionary<Attribute, double> atts
-SortedDictionary<Need, double> needs
-SortedDictionary<Distance, double> distances
-SortedSet<State> states
-Matrix<double> weights
-int qAtts
-int qNeeds
-int qStates
-int qDists
-Vector<double> neuralInput
-Vector<double> neuralOutput
-{static}MatrixBuilder<double> m
-{static}VectorBuilder<double> v
'+AgentStats(SortedDictionary<Attribute, double> atts, SortedDictionary<Need, double> needs, SortedSet<State> states, Matrix<double> weights) {
+AgentStats(...)
+State NextState()
}

abstract class MovableAgent {
+NavMeshAgent agent
+void moveTo(Vector3 to)
+void moveTo(GameObject to)
+IEnumerator FollowObject(GameObject to)
+IEnumerator WaitTilThereCoroutine(Vector3 to)
}

abstract class NotMovableAgent {
+{abstract} void moveTo(Vector3 to)
+{abstract} void moveTo(GameObject to)
}

class ChickenController {
~void Update()
~void Start()
-float getEffectiveSpeed(double normalized)
-float getEffectiveSize(double normalized)
+Agent findMate()
+Agent getBestFoodPosition()
+GameObject getBestWaterPosition()
+Species GetSpecies()
+string ToString()
}

class GrassController {
~void Update()
~void Start()
+Agent findMate()
+Agent getBestFoodPosition()
+GameObject getBestWaterPosition()
+Species GetSpecies()
+string ToString()
}

class FoxController {
~void Update()
~void Start()
-float getEffectiveSpeed(double normalized)
-float getEffectiveSize(double normalized)
+Agent findMate()
+Agent getBestFoodPosition()
+GameObject getBestWaterPosition()
+Species GetSpecies()
+string ToString()
}
@enduml